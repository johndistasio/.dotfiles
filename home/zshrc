# Uncomment for startup performance analysis (1/2)
#zmodload zsh/zprof

os="unknown"

case "$(uname -s)" in
Linux*)
   os="linux";;
Darwin*)
  os="macos";;
esac

# TODO Determine if there is still a use for this.
# Load ANSI color codes into the shell.
# Use like "%{$fg[green]%}", reset with "%{$reset_color%}".
#autoload -Uz colors && colors

# Array of 256-color compatible color escapes.
typeset -A clr
clr[reset]='%F{F}'
clr[red]='%F{9}'
clr[green]='%F{10}'
clr[yellow]='%F{11}'
clr[blue]='%F{12}'
clr[purple]='%F{13}'
clr[cyan]='%F{13}'

# Initialize the completion system.
autoload -Uz compinit && compinit

# Make all completion functions use their verbose forms.
zstyle ':completion:*' verbose true

# List directories first in file completion output.
zstyle ':completion:*' list-dirs-first true

# Always enable menu-style completion even if there are few matches.
zstyle ':completion:*' menu select

# Initialize the version control awareness system.
autoload -Uz vcs_info

# Enable the git backend for vcs_info.
zstyle ':vcs_info:*' enable git

# Detect changes in the local repository so %c and %u will work.
zstyle ':vcs_info:git:*' check-for-changes true

# Formatting for %c (staged changes) format string.
zstyle ':vcs_info:git*' stagedstr "${clr[green]}+${clr[reset]}"

# Formatting for %u (unstaged changes) format string.
zstyle ':vcs_info:git*' unstagedstr "${clr[red]}+${clr[reset]}"

# Normal prompt format string.
vcs_info_git_formats=":${clr[purple]}%b${clr[reset]}%u%c"
zstyle ':vcs_info:git*' formats "${vcs_info_git_formats}"

# Format prompt string used during an "action" like a rebase or merge.
zstyle ':vcs_info:git*' actionformats "${vcs_info_git_formats}:${clr[cyan]}%a${clr[reset]}"

# Change directory by typing directory name if it's not a command.
setopt auto_cd

# Make cd push the old directory onto the directory stack.
setopt auto_pushd

# Add commands to history as they are entered, don't wait for shell to exit.
setopt inc_append_history

# Allow parameter expansion, command substitution, and arithmetic expansion to
# happen in prompts.
setopt prompt_subst

# Executed before each prompt.
precmd() {
  vcs_info
}

PROMPT='${clr[blue]}%~${clr[reset]}${vcs_info_msg_0_}%# '

alias ll='ls -lh --color=auto'
alias ls='ls -h --color=auto'

if [[ "$os" == "macos" ]]; then
  alias ll='ls -lhG'
  alias ls='ls -hG'
fi

# Have a lot of fun!
alias ..='cd ..'

# Function instead of an alias since it seems to work as expected in a subshell.
if [[ $(command -v podman) ]]; then
  docker() {
    podman $@
  }
fi

# Tidy up and truncate output filenames to avoid hitting filename size limitations.
alias ydl='youtube-dl -o "%(title).150s-%(id)s.%(ext)s" --restrict-filenames'

# Ensure brew-installed versions of GNU tools are used instead of BSD tools on MacOS.
if [[ "$os" == "macos" ]]; then
   PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
   PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
   PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
fi

# Ensure XDG binpath is in PATH.
export PATH="$HOME/.local/bin:$PATH"

# python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
# Lazy-loading for pyenv
pyenv() {
  unset -f pyenv
  eval "$(command pyenv init -)"
  pyenv $@
}

python() {
  unset -f python
  eval "$(command pyenv init -)"
  python $@
}

python3() {
  unset -f python3
  eval "$(command pyenv init -)"
  python3 $@
}

venv() {
  local v="$1"

  if [[ ! -n "$v" ]]; then
    v="$(ls ~/.venv/ | fzf)"
  fi

  if [[ -n "$v" ]]; then
    source "$HOME/.venv/$v/bin/activate"
  fi
}

# javascript
export NVM_DIR="$HOME/.nvm"
# Lazy-loading for node tools
nvm() {
  unset -f nvm
  source "$NVM_DIR/nvm.sh"
  nvm "$@"
}
npm() {
  unset -f npm
  source "$NVM_DIR/nvm.sh"
  npm "$@"
}
npx() {
  unset -f npx
  source "$NVM_DIR/nvm.sh"
  npx "$@"
}
node() {
  unset -f node
  source "$NVM_DIR/nvm.sh"
  node "$@"
}

# go
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"
export PATH="/usr/local/go/bin:$PATH"

# TODO these still don't work as expected on MacOS
# fix home, delete, and end key escape codes so those keys work
if [[ "$os" == "linux" ]]; then
  bindkey "^[[1~" beginning-of-line
  bindkey "^[[3~" delete-char
  bindkey "^[[4~" end-of-line
fi

# Stick any site-local configuration in here (i.e. employer-specific config).
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

if type antibody > /dev/null; then
  source <(antibody init)
  antibody bundle < "$HOME/.zsh_plugins.txt"
else
  echo "zsh plugins not installed; antibody is missing"
fi

# Uncomment for startup performance analysis (2/2)
#zprof
